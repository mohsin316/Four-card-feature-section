*,
*::after,
*::before{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}       

:root{
    --red:hsl(0, 78%, 62%);
    --cyan:hsl(180, 62%, 55%);
    --orange:hsl(34, 97%, 64%);
    --blue:hsl(212, 86%, 64%);
    --very-Dblue:hsl(234, 12%, 34%);
    --grayish-blue:hsl(228, 5%, 59%);
    --very-Lgray:hsl(0, 0%, 98%);


    --ffS: 200;
    --ffM: 400;
    --ffB: 600;
    --ff: 'Poppins', sans-serif;
}

img{
    display: block;
    max-width: 100%;
}

body{
    background-color: var(--very-Lgray);
    min-height: 100vh;
    display: grid;
    place-content: center;
    text-align: center;
    font-family: var(--ff);
}

header{
    padding: 4rem 1rem;
    max-width: 375px;
}

span{
    font-size: 1.35rem;
    color: var(--grayish-blue);
    font-weight: var(--ffS);
}

h1{
    font-weight: var(--ffB);
    color: var(--very-Dblue);
    font-size: 1.35rem;
}

.sub-heading{
    padding-top: 1rem;
    font-size: .9rem;
    color: var(--grayish-blue);
    font-weight: var(--ffM);
}

main{
    padding-inline: 1rem;
    display: flex;
    flex-direction: column;
    gap: 2rem;
    margin-bottom: 3rem;
}

.card{
    background-color: white;
    border-radius: 5px;
    display: flex;
    flex-direction: column;
    overflow: hidden;
    text-align: left;
    padding: 1.75rem;
    max-width: 350px;
    box-shadow: 0px 10px 15px 0px hsla(0, 0%, 0%, .15);
}

.one{
    border-top: 4px solid var(--cyan);
}
.two{
    border-top: 4px solid var(--red);
}
.three{
    border-top: 4px solid var(--orange);
}
.four{
    border-top: 4px solid var(--blue);
}

/*.split is not needed when using grid. If using flexbox put card two and card three inside a div called 'split' in the HTML markup and then remove the bottom comment.*/

/*
.split{
    display: flex;
    flex-direction: column;
    gap: 2rem;
}
*/

h3{
    color: var(--very-Dblue);
    font-size: 1.25rem;
    font-weight: var(--ffB);
}

.card p{
    color: var(--grayish-blue);
    font-weight: var(--ffM);
    padding-top: .5rem;
    line-height: 1.5rem;
    font-size: .85rem;
}

.img-holder{
    padding-top: 2.5rem;
    align-self: flex-end;
    justify-self: flex-end;
}

@media (min-width:1000px) {

    /*
    refactored code using css grid. If you are using flexbox un comment the bottom code containing flex properites and comment the styles containing grid
    */

    /*
    main{
        flex-direction: row;
        justify-content: center;
        align-items: center;
    }
    */

    /* commented code below is another way of using grid. Ive used grid areas but you can do it by the usual way below */

    /*main{
        display: grid;
        grid-template-columns: repeat(3, 1fr);
    }

    .one{
        grid-column: 1/2;
        grid-row: 1/3;
        justify-self: center;
        align-self: center;
    }
    .two{
        grid-column: 2/3;
    }
    .three{
        grid-column: 2/3;
    }
    .four{
        grid-column: 3/4;
        grid-row: 1/3;
        justify-self: center;
        align-self: center;
    }*/


    main{
        display: grid;
        grid-template-areas: 
        "supervisor team calculator"
        "supervisor bulb calculator";
    }

    .one{
        grid-area: supervisor;
        justify-self: center;
        align-self: center;
    }
    .two{
        grid-area: team;
    }
    .three{
        grid-area: bulb;
    }
    .four{
        grid-area: calculator;
        justify-self: center;
        align-self: center;
    }
    
    header{
        min-width: 100%;
        padding-block: 4rem 4rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }
    

    span{
        font-size: 2.25rem;
    }
    
    h1{
        font-size: 2.25rem;
    }
    
    .sub-heading{
        padding-top: 1rem;
        font-size: 1.2rem;
        max-width: 650px;
    }
}

@media (min-width:1400px){
    header, main{
        max-width:1150px ;
    }
}